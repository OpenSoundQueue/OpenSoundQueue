openapi: 3.0.3
info:
  title: OpenSoundQueue API
  description: Documentation of all API endpoints
  version: 1.0.0
servers:
  - url: 'https://localhost:8080'
paths:
  /login/private/auth:
    post:
      tags:
        - public
      description: User logs in (private & requireAuth)
      security:
        - { }
      requestBody:
        required: true
        description: Access credentials
        content:
          application/json:
            schema:
              example:
                username: WizMarki
                password: stubSi10!
                entryCode: Wts1a!b
      responses:
        200:
          description: Successfully logged in. Returns *apiKey*.
          content:
            application/json:
              example:
                apiKey: Lu9Tc1Pdola+SOnfPUxEkoKYuQLdjmsMK89uxT+RrrVegf1xQOI6Mpv5IXrYX6CVsukFLhwGzNH/zLMsuoBSbQ==
        400:
          description: Incorrect username or password
          content:
            application/json:
              example:
                error: Incorrect username or password
        401:
          description: Incorrect entryCode
          content:
            application/json:
              example:
                error: Incorrect entryCode
  /login/private:
    post:
      tags:
        - public
      description: User logs in (private & no auth)
      security:
        - { }
      requestBody:
        required: true
        description: Access credentials
        content:
          application/json:
            schema:
              example:
                username: WizMarki
                entryCode: Wts1a!b
      responses:
        200:
          description: Successfully logged in. Returns *apiKey*.
          content:
            application/json:
              example:
                apiKey: Lu9Tc1Pdola+SOnfPUxEkoKYuQLdjmsMK89uxT+RrrVegf1xQOI6Mpv5IXrYX6CVsukFLhwGzNH/zLMsuoBSbQ==
        400:
          description: Username already taken
          content:
            application/json:
              example:
                error: Username already taken
        401:
          description: Incorrect entryCode
          content:
            application/json:
              example:
                error: Incorrect entryCode
  /login/public/auth:
    post:
      tags:
        - public
      description: User logs in (public & requireAuth)
      security:
        - { }
      requestBody:
        required: true
        description: Access credentials
        content:
          application/json:
            schema:
              example:
                username: WizMarki
                password: stubSi10!
      responses:
        200:
          description: Successfully logged in. Returns *apiKey*.
          content:
            application/json:
              example:
                apiKey: Lu9Tc1Pdola+SOnfPUxEkoKYuQLdjmsMK89uxT+RrrVegf1xQOI6Mpv5IXrYX6CVsukFLhwGzNH/zLMsuoBSbQ==
        400:
          description: Incorrect username or password
          content:
            application/json:
              example:
                error: Incorrect username or password
  /login/public:
    post:
      tags:
        - public
      description: User logs in (public & no auth)
      security:
        - { }
      requestBody:
        required: true
        description: Access credentials
        content:
          application/json:
            schema:
              example:
                username: WizMarki
      responses:
        200:
          description: Successfully logged in. Returns *apiKey*.
          content:
            application/json:
              example:
                apiKey: Lu9Tc1Pdola+SOnfPUxEkoKYuQLdjmsMK89uxT+RrrVegf1xQOI6Mpv5IXrYX6CVsukFLhwGzNH/zLMsuoBSbQ==
        400:
          description: Username already taken
          content:
            application/json:
              example:
                error: Username already taken
  /verify/api-key:
    get:
      tags:
        - auth
      description: Checks if the user's set API key is valid.
      security:
        - ApiKeyAuth: [ ]
      responses:
        200:
          description: User recognized
        401:
          description: Invalid API key
          content:
            application/json:
              example:
                error: Invalid API key
  /verify/entry-code:
    get:
      tags:
        - public
      description: Checks validation of entry key
      requestBody:
        required: true
        description: Entry Code
        content:
          application/json:
            schema:
              example:
                entry-code: jhbdfh
      responses:
        200:
          description: entry code valid
        401:
          description: Invalid entry key
          content:
            application/json:
              example:
                error: Invalid entry key
  /queue/page/{page-number}:
    get:
      tags:
        - public
      description: receive a page of the queue with default page size
      parameters:
        - in: path
          name: page-number
          schema:
            type: integer
            example: 2
          required: true
          description: Number of page
      responses:
        200:
          description: data of the requested page
          content:
            application/json:
              schema:
                example:
                  numberOfPages: 12
                  page:
                    - numberInQueue: 0
                      song:
                        artist: Giveon
                        duration: 200
                        title: For Tonight
                    - numberInQueue: 1
                      song:
                        artist: The Kid LAROI & Justin Bieber
                        duration: 69
                        title: Stay
                    - numberInQueue: 2
                      song:
                        artist: Lil Nas X & Jack Harlow
                        duration: 157
                        title: Industry Baby
        400:
          description: page number does not exist
          content:
            application/json:
              schema:
                example:
                  error: The requested page number does not exist
  /queue/page/{page-number}/page-size/{page-size}:
    get:
      tags:
        - public
      description: receive a page of the queue with custom page size
      parameters:
        - in: path
          name: page-number
          schema:
            type: integer
            example: 2
          required: true
          description: Number of page
        - in: path
          name: page-size
          schema:
            type: integer
            example: 10
          required: true
          description: Size of page
      responses:
        200:
          description: data of the requested page
          content:
            application/json:
              schema:
                example:
                  numberOfPages: 12
                  page:
                    - numberInQueue: 0
                      song:
                        artist: Giveon
                        duration: 200
                        title: For Tonight
                    - numberInQueue: 1
                      song:
                        artist: The Kid LAROI & Justin Bieber
                        duration: 69
                        title: Stay
                    - numberInQueue: 2
                      song:
                        artist: Lil Nas X & Jack Harlow
                        duration: 157
                        title: Industry Baby
        400:
          description: page number does not exist
          content:
            application/json:
              schema:
                example:
                  error: The requested page number does not exist
  /queue/all:
    get:
      tags:
        - public
      description: returns all songs that are in the queue
      responses:
        200:
          description: all songs in queue
          content:
            application/json:
              schema:
                example:
                  - numberInQueue: 0
                    song:
                      artist: Giveon
                      duration: 200
                      title: For Tonight
                  - numberInQueue: 1
                    song:
                      artist: The Kid LAROI & Justin Bieber
                      duration: 69
                      title: Stay
                  - numberInQueue: 2
                    song:
                      artist: Lil Nas X & Jack Harlow
                      duration: 157
                      title: Industry Baby
        400:
          description: something did not work

  /queue/add:
    post:
      tags:
        - auth
      description: use a song link to add a song to the queue
      requestBody:
        content:
          application/json:
            schema:
              example:
                link: https://youtu.be/dQw4w9WgXcQ?si=wBE7G0lWPWkYC8xZ
      responses:
        200:
          description: song added to queue
          content:
            application/json:
              schema:
                example:
                  artist: Giveon
                  title: For Tonight
                  duration: 200
        400:
          description: song could not be added
          content:
            application/json:
              schema:
                example:
                  error: Song could not be added
  /queue/now-playing:
    get:
      tags:
        - public
      description: receive the song that is currently playing and metadata of it
      responses:
        200:
          description: data of the currently playing song and its metadata
          content:
            application/json:
              schema:
                example:
                  isPlaying: True
                  time: 61
                  stamp: 1693508721172
                  song:
                    artist: The Kid LAROI & Justin Bieber
                    title: Stay
                    duration: 60
        202:
          description: no song currently playing
          content:
            application/json:
              schema:
                example:
                  status: No song currently playing
  /vote-skip/status:
    get:
      tags:
        - auth
      description: receives the status of the vote skip for the playing song
      responses:
        200:
          description: vote skip data
          content:
            application/json:
              schema:
                example:
                  hasVoted: True
                  received: 1
                  required: 5
        400:
          description: no active vote skip
          content:
            application/json:
              schema:
                example:
                  error: No active vote skip
  /vote-skip/vote:
    get:
      tags:
        - auth
      description: requests vote for the current vote skip
      responses:
        200:
          description: vote skip data
          content:
            application/json:
              schema:
                example:
                  hasVoted: True
                  received: 1
                  required: 5
        400:
          description: no active vote skip
          content:
            application/json:
              schema:
                example:
                  error: No active vote skip
  /vote-skip/withdraw:
    get:
      tags:
        - auth
      description: withdraws the vote for the current vote skip
      responses:
        200:
          description: vote skip data
          content:
            application/json:
              schema:
                example:
                  hasVoted: True
                  received: 1
                  required: 5
        400:
          description: no active vote skip
          content:
            application/json:
              schema:
                example:
                  error: No active vote skip
  /search/history/{search-term}/max-results/{max-results}:
    get:
      tags:
        - auth
      description: fuzzy search history
      parameters:
        - in: path
          name: search-term
          schema:
            type: string
            example: so high
          required: true
          description: Search term
        - in: path
          name: max-results
          schema:
            type: integer
            example: 20
          required: true
          description: maximum number of results returned by the request important when for example search is only "e"
      responses:
        200:
          description: array of songs
          content:
            application/json:
              example:
                - title: Easy On Me
                  artist: Adele
                  duration: 176
                  link: https://youtu.be/hicmpizont
                - title: Stay
                  artist: The Kid LAROI
                  duration: 70
                  link: https://youtu.be/ihdrntudol
                - title: Industry Baby
                  artist: Lil Nax X
                  duration: 115
                  link: https://youtu.be/ihdrntudol
                - title: Bad Habits
                  artist: Ed Sheeran
                  duration: 232
                  link: https://youtu.be/ihdrntudol
                - title: Way 2 Sexy
                  artist: Drake
                  duration: 193
                  link: https://youtu.be/ihdrntudol
        400:
          description: search did not work
          content:
            application/json:
              schema:
                example:
                  error: search did not work
  /users:
    get:
      tags:
        - auth
      description: returns all users that are in the queue
      responses:
        200:
          description: list of all users
          content:
            application/json:
              example:
                - id: 1
                  username: Quantompixel
                  lastOnline: 2011-10-05T14:48:00.000Z
                - id: 2
                  username: Daniel
                  lastOnline: 2013-07-08T14:48:00.000Z
                - id: 3
                  username: Markus
                  lastOnline: 2010-08-05T14:48:00.000Z
        400:
          description: could not return users
          content:
            application/json:
              schema:
                example:
                  error: could not return users
  /user/{id}:
    delete:
      tags:
        - auth
      description: delete a user
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 2
          required: true
          description: Id of user
      responses:
        200:
          description: returns updated version of all users
          content:
            application/json:
              schema:
                example:
                  - id: 1
                    username: Quantompixel
                    lastOnline: 2011-10-05T14:48:00.000Z
                  - id: 2
                    username: Daniel
                    lastOnline: 2013-07-08T14:48:00.000Z
                  - id: 3
                    username: Markus
                    lastOnline: 2010-08-05T14:48:00.000Z
        400:
          description: user with id not found
          content:
            application/json:
              schema:
                example:
                  error: user with <id> not found
  /queue/change-order:
    patch:
      tags:
        - auth
      description: Change order of songs
      requestBody:
        content:
          application/json:
            schema:
              example:
                oldPos: 2
                newPos: 3
      responses:
        202:
          description: Position has been changed
          content:
            application/json:
              schema:
                example:
                  - numberInQueue: 0
                    song:
                      artist: Giveon
                      duration: 200
                      title: For Tonight
                  - numberInQueue: 1
                    song:
                      artist: The Kid LAROI & Justin Bieber
                      duration: 69
                      title: Stay
                  - numberInQueue: 2
                    song:
                      artist: Lil Nas X & Jack Harlow
                      duration: 157
                      title: Industry Baby
        400:
          description: Position of song does not exist
          content:
            application/json:
              schema:
                example:
                  error: position of song does not exist
  /queue/start:
      post:
        tags:
          - auth
        description: Start the queue
        responses:
          202:
            description: Queue has been started
          400:
            description: Could not start the queue
            content:
              application/json:
                schema:
                  example:
                    error: could not start the queue
  /queue/stop:
    post:
      tags:
        - auth
      description: Stop the queue
      responses:
        202:
          description: Queue has been stopped
        400:
          description: Could not stop the queue
          content:
            application/json:
              schema:
                example:
                  error: could not stop the queue
  /queue/volume:
    post:
      tags:
        - auth
      description: Change the volume (value between 0 and 100)
      requestBody:
        content:
          application/json:
            schema:
              example:
                volume: 75
      responses:
        200:
          description: Volume has been changed
          content:
            application/json:
              schema:
                example:
                  volume: 75
        400:
          description: Could not change volume
          content:
            application/json:
              schema:
                example:
                  error: could not change volume
  /queue/current-volume:
    get:
      tags:
        - auth
      description: Get the current volume
      responses:
        200:
          description: Volume is being returned
          content:
            application/json:
              schema:
                example:
                  volume: 75
        400:
          description: Could not fetch volume
          content:
            application/json:
              schema:
                example:
                  error: could not fetch volume
  /self:
    get:
      tags:
        - auth
      description: get the data of the own user
      responses:
        200:
          description: data of user
          content:
            application/json:
              schema:
                example:
                  id: 2
                  username: Daniel
                  lastOnline: 2023-10-30T21:16:38.260Z
        400:
          description: did not find user
          content:
            application/json:
              schema:
                example:
                  error: did not find user
  /skip:
    post:
      tags:
        - auth
      description: skip to the next song
      responses:
        200:
          description: song has been skipped
        400:
          description: skip failed
          content:
            application/json:
              schema:
                example:
                  error: skip failed
  /replay:
    post:
      tags:
        - auth
      description: replay current song
      responses:
        200:
          description: song is being replayed
        400:
          description: replay failed
          content:
            application/json:
              schema:
                example:
                  error: replay failed
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
      bearerFormat: TOKEN

