openapi: 3.0.3
info:
  title: OpenSoundQueue API
  description: Documentation of all API endpoints
  version: 1.0.0
servers:
  - url: 'https://localhost:8080'
paths:
  /login/private/auth:
    post:
      tags:
        - public
        - login
      description: User logs in (private & requireAuth)
      security:
        - { }
      requestBody:
        required: true
        description: Access credentials
        content:
          application/json:
            schema:
              example:
                username: WizMarki
                password: stubSi10!
                entryCode: Wts1a!b
      responses:
        200:
          description: Successfully logged in. Returns *apiKey*.
          content:
            application/json:
              example:
                apiKey: Lu9Tc1Pdola+SOnfPUxEkoKYuQLdjmsMK89uxT+RrrVegf1xQOI6Mpv5IXrYX6CVsukFLhwGzNH/zLMsuoBSbQ==
        400:
          description: Incorrect username or password
          content:
            application/json:
              example:
                error: Incorrect username or password
        401:
          description: Incorrect entryCode
          content:
            application/json:
              example:
                error: Incorrect entryCode
  /login/private:
    post:
      tags:
        - public
        - login
      description: User logs in (private & no auth)
      security:
        - { }
      requestBody:
        required: true
        description: Access credentials
        content:
          application/json:
            schema:
              example:
                username: WizMarki
                entryCode: Wts1a!b
      responses:
        200:
          description: Successfully logged in. Returns *apiKey*.
          content:
            application/json:
              example:
                apiKey: Lu9Tc1Pdola+SOnfPUxEkoKYuQLdjmsMK89uxT+RrrVegf1xQOI6Mpv5IXrYX6CVsukFLhwGzNH/zLMsuoBSbQ==
        400:
          description: Username already taken
          content:
            application/json:
              example:
                error: Username already taken
        401:
          description: Incorrect entryCode
          content:
            application/json:
              example:
                error: Incorrect entryCode
  /login/public/auth:
    post:
      tags:
        - public
        - login
      description: User logs in (public & requireAuth)
      security:
        - { }
      requestBody:
        required: true
        description: Access credentials
        content:
          application/json:
            schema:
              example:
                username: WizMarki
                password: stubSi10!
      responses:
        200:
          description: Successfully logged in. Returns *apiKey*.
          content:
            application/json:
              example:
                apiKey: Lu9Tc1Pdola+SOnfPUxEkoKYuQLdjmsMK89uxT+RrrVegf1xQOI6Mpv5IXrYX6CVsukFLhwGzNH/zLMsuoBSbQ==
        400:
          description: Incorrect username or password
          content:
            application/json:
              example:
                error: Incorrect username or password
  /login/public:
    post:
      tags:
        - public
        - login
      description: User logs in (public & no auth)
      security:
        - { }
      requestBody:
        required: true
        description: Access credentials
        content:
          application/json:
            schema:
              example:
                username: WizMarki
      responses:
        200:
          description: Successfully logged in. Returns *apiKey*.
          content:
            application/json:
              example:
                apiKey: Lu9Tc1Pdola+SOnfPUxEkoKYuQLdjmsMK89uxT+RrrVegf1xQOI6Mpv5IXrYX6CVsukFLhwGzNH/zLMsuoBSbQ==
        400:
          description: Username already taken
          content:
            application/json:
              example:
                error: Username already taken
  /logout:
    post:
      tags:
        - auth
        - login
        - user
      description: Logs a user out
      security:
        - ApiKeyAuth: [ ]
      responses:
        201:
          description: user logged out
        401:
          description: Invalid API key
          content:
            application/json:
              example:
                error: Invalid API key
  /register/create-account:
    post:
      tags:
        - public
        - register
        - user
      description: Endpoint for the registration form
      requestBody:
        required: true
        description: Registration form
        content:
          application/json:
            schema:
              example:
                username: WizMarki
                email: wizmarki@gmail.com
                password: 1!MarkiWiz
      responses:
        201:
          description: user id of the created user
          content:
            application/json:
              example:
                id: 51
        400:
          description: email is already taken
          content:
            application/json:
              example:
                error: Email address is already taken
  /register/verify:
    post:
      tags:
        - public
        - register
        - user
      description: Verifies if the email is owned by the user by checking the verification code
      requestBody:
        required: true
        description: email and user id
        content:
          application/json:
            schema:
              example:
                code: asdfAFDasdfaw324324
                email: wizamrk@gmail.com
      responses:
        201:
          description: account verified
          content:
            application/json:
              example:
                apiKey: Lu9Tc1Pdola+SOnfPUxEkoKYuQLdjmsMK89uxT+RrrVegf1xQOI6Mpv5IXrYX6CVsukFLhwGzNH/zLMsuoBSbQ==
        400:
          description: verification code is wrong
          content:
            application/json:
              example:
                error: verification code is wrong
  /register/resend-email:
    post:
      tags:
        - public
        - register
        - user
      description: Sends another email verification
      requestBody:
        required: true
        description: email of user
        content:
          application/json:
            schema:
              example:
                email: wizamrk@gmail.com
      responses:
        200:
          description: email sent
        400:
          description: email does not exist
          content:
            application/json:
              example:
                error: email does not exist
  /verify/api-key:
    get:
      tags:
        - auth
        - verify
      description: Checks if the user's set API key is valid.
      security:
        - ApiKeyAuth: [ ]
      responses:
        200:
          description: User recognized
        401:
          description: Invalid API key
          content:
            application/json:
              example:
                error: Invalid API key
  /verify/entry-code:
    get:
      tags:
        - public
        - verify
      description: Checks validation of entry key
      requestBody:
        required: true
        description: Entry Code
        content:
          application/json:
            schema:
              example:
                entry-code: jhbdfh
      responses:
        200:
          description: entry code valid
        401:
          description: Invalid entry key
          content:
            application/json:
              example:
                error: Invalid entry key
  /queue/page/{page-number}:
    get:
      tags:
        - public
        - queue
      description: receive a page of the queue with default page size
      parameters:
        - in: path
          name: page-number
          schema:
            type: integer
            example: 2
          required: true
          description: Number of page
      responses:
        200:
          description: data of the requested page
          content:
            application/json:
              schema:
                example:
                  numberOfPages: 12
                  page:
                    - numberInQueue: 0
                      song:
                        artist: Giveon
                        duration: 200
                        title: For Tonight
                    - numberInQueue: 1
                      song:
                        artist: The Kid LAROI & Justin Bieber
                        duration: 69
                        title: Stay
                    - numberInQueue: 2
                      song:
                        artist: Lil Nas X & Jack Harlow
                        duration: 157
                        title: Industry Baby
        400:
          description: page number does not exist
          content:
            application/json:
              schema:
                example:
                  error: The requested page number does not exist
  /queue/page/{page-number}/page-size/{page-size}:
    get:
      tags:
        - public
        - queue
      description: receive a page of the queue with custom page size
      parameters:
        - in: path
          name: page-number
          schema:
            type: integer
            example: 2
          required: true
          description: Number of page
        - in: path
          name: page-size
          schema:
            type: integer
            example: 10
          required: true
          description: Size of page
      responses:
        200:
          description: data of the requested page
          content:
            application/json:
              schema:
                example:
                  numberOfPages: 12
                  page:
                    - numberInQueue: 0
                      song:
                        artist: Giveon
                        duration: 200
                        title: For Tonight
                    - numberInQueue: 1
                      song:
                        artist: The Kid LAROI & Justin Bieber
                        duration: 69
                        title: Stay
                    - numberInQueue: 2
                      song:
                        artist: Lil Nas X & Jack Harlow
                        duration: 157
                        title: Industry Baby
        400:
          description: page number does not exist
          content:
            application/json:
              schema:
                example:
                  error: The requested page number does not exist
  /queue/all:
    get:
      tags:
        - public
        - queue
      description: returns all songs that are in the queue
      responses:
        200:
          description: all songs in queue
          content:
            application/json:
              schema:
                example:
                  - numberInQueue: 0
                    song:
                      artist: Giveon
                      duration: 200
                      title: For Tonight
                  - numberInQueue: 1
                    song:
                      artist: The Kid LAROI & Justin Bieber
                      duration: 69
                      title: Stay
                  - numberInQueue: 2
                    song:
                      artist: Lil Nas X & Jack Harlow
                      duration: 157
                      title: Industry Baby
        400:
          description: something did not work
  /queue/add:
    post:
      tags:
        - auth
        - queue
      description: use a song link to add a song to the queue
      requestBody:
        content:
          application/json:
            schema:
              example:
                link: https://youtu.be/dQw4w9WgXcQ?si=wBE7G0lWPWkYC8xZ
      responses:
        200:
          description: song added to queue
          content:
            application/json:
              schema:
                example:
                  artist: Giveon
                  title: For Tonight
                  duration: 200
        400:
          description: song could not be added
          content:
            application/json:
              schema:
                example:
                  error: Song could not be added
  /queue/now-playing:
    get:
      tags:
        - public
        - queue
      description: receive the song that is currently playing and metadata of it
      responses:
        200:
          description: data of the currently playing song and its metadata
          content:
            application/json:
              schema:
                example:
                  isPlaying: True
                  time: 61
                  stamp: 1693508721172
                  song:
                    artist: The Kid LAROI & Justin Bieber
                    title: Stay
                    duration: 60
        202:
          description: no song currently playing
          content:
            application/json:
              schema:
                example:
                  status: No song currently playing
  /vote-skip/status:
    get:
      tags:
        - auth
        - skip
      description: receives the status of the vote skip for the playing song
      responses:
        200:
          description: vote skip data
          content:
            application/json:
              schema:
                example:
                  hasVoted: True
                  received: 1
                  required: 5
        400:
          description: no active vote skip
          content:
            application/json:
              schema:
                example:
                  error: No active vote skip
  /vote-skip/vote:
    get:
      tags:
        - auth
        - skip
      description: requests vote for the current vote skip
      responses:
        200:
          description: vote skip data
          content:
            application/json:
              schema:
                example:
                  hasVoted: True
                  received: 1
                  required: 5
        400:
          description: no active vote skip
          content:
            application/json:
              schema:
                example:
                  error: No active vote skip
  /vote-skip/withdraw:
    get:
      tags:
        - auth
        - skip
      description: withdraws the vote for the current vote skip
      responses:
        200:
          description: vote skip data
          content:
            application/json:
              schema:
                example:
                  hasVoted: True
                  received: 1
                  required: 5
        400:
          description: no active vote skip
          content:
            application/json:
              schema:
                example:
                  error: No active vote skip
  /search/history/{search-term}/max-results/{max-results}:
    get:
      tags:
        - auth
        - queue
      description: fuzzy search history
      parameters:
        - in: path
          name: search-term
          schema:
            type: string
            example: so high
          required: true
          description: Search term
        - in: path
          name: max-results
          schema:
            type: integer
            example: 20
          required: true
          description: maximum number of results returned by the request important when for example search is only "e"
      responses:
        200:
          description: array of songs
          content:
            application/json:
              example:
                - title: Easy On Me
                  artist: Adele
                  duration: 176
                  link: https://youtu.be/hicmpizont
                - title: Stay
                  artist: The Kid LAROI
                  duration: 70
                  link: https://youtu.be/ihdrntudol
                - title: Industry Baby
                  artist: Lil Nax X
                  duration: 115
                  link: https://youtu.be/ihdrntudol
                - title: Bad Habits
                  artist: Ed Sheeran
                  duration: 232
                  link: https://youtu.be/ihdrntudol
                - title: Way 2 Sexy
                  artist: Drake
                  duration: 193
                  link: https://youtu.be/ihdrntudol
        400:
          description: search did not work
          content:
            application/json:
              schema:
                example:
                  error: search did not work
  /users:
    get:
      tags:
        - auth
        - user
      description: returns all users that are in the queue
      responses:
        200:
          description: list of all users
          content:
            application/json:
              example:
                - id: 1
                  username: Quantompixel
                  lastOnline: 2011-10-05T14:48:00.000Z
                  roles:
                    - id: 2
                      name: FancyRole
                    - id: 3
                      name: Admin
                - id: 2
                  username: Daniel
                  lastOnline: 2013-07-08T14:48:00.000Z
                - id: 3
                  username: Markus
                  lastOnline: 2010-08-05T14:48:00.000Z
        400:
          description: could not return users
          content:
            application/json:
              schema:
                example:
                  error: could not return users
  /user/{id}:
    delete:
      tags:
        - auth
        - user
      description: delete a user
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 2
          required: true
          description: Id of user
      responses:
        200:
          description: returns updated version of all users
          content:
            application/json:
              schema:
                example:
                  - id: 1
                    username: Quantompixel
                    lastOnline: 2011-10-05T14:48:00.000Z
                  - id: 2
                    username: Daniel
                    lastOnline: 2013-07-08T14:48:00.000Z
                  - id: 3
                    username: Markus
                    lastOnline: 2010-08-05T14:48:00.000Z
        400:
          description: user with id not found
          content:
            application/json:
              schema:
                example:
                  error: user with <id> not found
  /user/{id}/roles:
    patch:
      tags:
        - auth
        - user
      description: edit roles of a user
      requestBody:
        content:
          application/json:
            schema:
              example:
                - id: 1
                  name: basic
                - id: 2
                  name: admin
                - id: 3
                  name: muted
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 2
          required: true
          description: Id of user
      responses:
        201:
          description: roles of user have been updated
          content:
            application/json:
              schema:
                example:
                  - id: 1
                    name: basic
                  - id: 2
                    name: admin
                  - id: 3
                    name: muted
        400:
          description: user does not exist
          content:
            application/json:
              schema:
                example:
                  error: user does not exist
  /user/permissions:
    get:
      tags:
        - auth
        - user
      description: get the permissions of user
      responses:
        200:
          description: returns permissions of user
          content:
            application/json:
              schema:
                example:
                  - skip: true
                  - play: false
                  - viewAdminPanel: false
        400:
          description: user with token not found
          content:
            application/json:
              schema:
                example:
                  error: user with <token> not found
  /queue/change-order:
    patch:
      tags:
        - auth
        - queue
      description: Change order of songs
      requestBody:
        content:
          application/json:
            schema:
              example:
                oldPos: 2
                newPos: 3
      responses:
        202:
          description: Position has been changed
          content:
            application/json:
              schema:
                example:
                  - numberInQueue: 0
                    song:
                      artist: Giveon
                      duration: 200
                      title: For Tonight
                  - numberInQueue: 1
                    song:
                      artist: The Kid LAROI & Justin Bieber
                      duration: 69
                      title: Stay
                  - numberInQueue: 2
                    song:
                      artist: Lil Nas X & Jack Harlow
                      duration: 157
                      title: Industry Baby
        400:
          description: Position of song does not exist
          content:
            application/json:
              schema:
                example:
                  error: position of song does not exist
  /queue/start:
      post:
        tags:
          - auth
          - queue
        description: Start the queue
        responses:
          202:
            description: Queue has been started
          400:
            description: Could not start the queue
            content:
              application/json:
                schema:
                  example:
                    error: could not start the queue
  /queue/stop:
    post:
      tags:
        - auth
        - queue
      description: Stop the queue
      responses:
        202:
          description: Queue has been stopped
        400:
          description: Could not stop the queue
          content:
            application/json:
              schema:
                example:
                  error: could not stop the queue
  /queue/skip:
    post:
      tags:
        - auth
        - queue
      description: Skip the current song
      responses:
        202:
          description: Song has been skipped
        400:
          description: Could not skip the song
          content:
            application/json:
              schema:
                example:
                  error: Could not skip the song
  /queue/replay:
    post:
      tags:
        - auth
        - queue
      description: Restart the current song
      responses:
        202:
          description: Song has been replayed
        400:
          description: Could not replay the song
          content:
            application/json:
              schema:
                example:
                  error: Could not replay the song
  /queue/volume:
    post:
      tags:
        - auth
        - queue
      description: Change the volume (value between 0 and 100)
      requestBody:
        content:
          application/json:
            schema:
              example:
                volume: 75
      responses:
        200:
          description: Volume has been changed
          content:
            application/json:
              schema:
                example:
                  volume: 75
        400:
          description: Could not change volume
          content:
            application/json:
              schema:
                example:
                  error: could not change volume
  /queue/current-volume:
    get:
      tags:
        - auth
        - queue
      description: Get the current volume
      responses:
        200:
          description: Volume is being returned
          content:
            application/json:
              schema:
                example:
                  volume: 75
        400:
          description: Could not fetch volume
          content:
            application/json:
              schema:
                example:
                  error: could not fetch volume
  /self:
    get:
      tags:
        - auth
        - user
      description: get the data of the own user
      responses:
        200:
          description: data of user
          content:
            application/json:
              schema:
                example:
                  id: 2
                  username: Daniel
                  lastOnline: 2023-10-30T21:16:38.260Z
        400:
          description: did not find user
          content:
            application/json:
              schema:
                example:
                  error: did not find user
  /role/create:
    post:
      tags:
        - auth
        - role/permission
      description: create a new role
      requestBody:
        content:
          application/json:
            schema:
              example:
                name: FancyRole
                permissions:
                  - skip: true
                  - play: false
                  - viewAdminPanel: false
      responses:
        201:
          description: new role has been created
          content:
            application/json:
              schema:
                example:
                  id: 2
                  name: FancyRole
                  permissions:
                    - skip: true
                    - play: false
                    - viewAdminPanel: false
                  member:
                    - name: Luki
                      id: 1
                    - name: Dani
                      id: 2
        400:
          description: a role with this name already exists
          content:
            application/json:
              schema:
                example:
                  error: a role with this name already exists
  /permissions:
    get:
      tags:
        - auth
        - role/permission
      description: get all existing permissions
      responses:
        200:
          description: all existing permissions
          content:
            application/json:
              schema:
                example:
                  - "skip"
                  - "play"
                  - "viewAdminPanel"
        401:
          description: unauthorized
          content:
            application/json:
              schema:
                example:
                  error: unauthorized
  /roles:
    get:
      tags:
        - auth
        - role/permission
      description: get all existing roles
      responses:
        200:
          description: all existing roles
          content:
            application/json:
              schema:
                example:
                  - id: 1
                    name: Quantompixel
                    permissions:
                      - skip: true
                      - play: false
                      - viewAdminPanel: false
                  - id: 2
                    name: Daniel
                    permissions:
                      - skip: true
                      - play: false
                      - viewAdminPanel: false
                  - id: 3
                    name: Markus
                    permissions:
                      - skip: true
                      - play: false
                      - viewAdminPanel: false
        401:
          description: unauthorized
          content:
            application/json:
              schema:
                example:
                  error: unauthorized
  /role/get/{id}:
    get:
      tags:
        - auth
        - role/permission
      description: get a role
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 2
          required: true
          description: Id of role
      responses:
        200:
          description: returns a roles
          content:
            application/json:
              schema:
                example:
                  - id: 1
                    name: admin
                    permissions:
                      - skip: true
                      - play: false
                      - viewAdminPanel: false
                    member:
                      - name: Luki
                        id: 1
                      - name: Dani
                        id: 2
        400:
          description: role with id not found
          content:
            application/json:
              schema:
                example:
                  error: role with <id> not found
  /role/{id}:
    delete:
      tags:
        - auth
        - role/permission
      description: delete a role
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 2
          required: true
          description: Id of role
      responses:
        200:
          description: returns updated version of all roles
          content:
            application/json:
              schema:
                example:
                  - id: 1
                    name: Quantompixel
                  - id: 2
                    name: Daniel
                  - id: 3
                    name: Markus
        400:
          description: role with id not found
          content:
            application/json:
              schema:
                example:
                  error: role with <id> not found
  /role/edit:
    patch:
      tags:
        - auth
        - role/permission
      description: edit a role
      requestBody:
        content:
          application/json:
            schema:
              example:
                id: 2
                name: FancyRole
                permissions:
                  - skip: true
                  - play: false
                  - viewAdminPanel: false
                members:
                  - id: 1
                    name: Markus
                  - id: 2
                    name: Lukas
      responses:
        201:
          description: role has been updated
          content:
            application/json:
              schema:
                example:
                  id: 2
                  name: FancyRoleUpdated
                  permissions:
                    - skip: true
                    - play: false
                    - viewAdminPanel: false
                  member:
                    - name: Luki
                      id: 1
                    - name: Dani
                      id: 2
        400:
          description: role does not exist
          content:
            application/json:
              schema:
                example:
                  error: role does not exist
  /system/language/set/{language}:
    patch:
      tags:
        - system
      description: change default language
      parameters:
        - in: path
          name: language
          schema:
            type: string
            example: DE
          required: true
          description: abbreviation of language
      responses:
        201:
          description: default language has been updated
          content:
            application/json:
              schema:
                example:
                  language: DE
  /system/language:
    get:
      tags:
        - system
      description: get default language
      responses:
        200:
          description: default language
          content:
            application/json:
              schema:
                example:
                  language: DE
  /system/privacy/set:
    patch:
      tags:
        - system
      description: change privacy setting
      requestBody:
        content:
          application/json:
            schema:
              example:
                is-private: true
                entry-code: Schodl
      responses:
        201:
          description: default language has been updated
          content:
            application/json:
              schema:
                example:
                  is-private: true
                  entry-code: Schodl
  /system/privacy:
    get:
      tags:
        - system
      description: get privacy setting
      responses:
        200:
          description: privacy setting
          content:
            application/json:
              schema:
                example:
                  is-private: true
                  entry-code: Schodl
  /system/email-auth/set/{email-auth}:
    patch:
      tags:
        - system
      description: change email auth setting
      parameters:
        - in: path
          name: email-auth
          schema:
            type: boolean
            example: true
          required: true
          description: is email auth
      responses:
        201:
          description: email auth has been updated
          content:
            application/json:
              schema:
                example:
                  email-auth: true
  /system/email-auth:
    get:
      tags:
        - system
      description: get email auth
      responses:
        200:
          description: email auth
          content:
            application/json:
              schema:
                example:
                  email-auth: true
  /system/sources/set:
    patch:
      tags:
        - system
      description: change sources
      requestBody:
        content:
          application/json:
            schema:
              example:
                sources: ["youtube", "soundcloud"]
      responses:
        201:
          description: sources has been updated
          content:
            application/json:
              schema:
                example:
                  - "youtube"
                  - "soundcloud"
  /system/sources:
    get:
      tags:
        - system
      description: get sources
      responses:
        200:
          description: supported sources
          content:
            application/json:
              schema:
                example:
                  - "youtube"
                  - "soundcloud"
  /system/supported-sources:
    get:
      tags:
        - system
      description: get all supported sources
      responses:
        200:
          description: supported sources
          content:
            application/json:
              schema:
                example:
                  - "youtube"
                  - "soundcloud"
                  - "apple music"
  /system/installation-state:
    get:
      tags:
        - system
      description: get installation status
      responses:
        200:
          description: installation status
          content:
            application/json:
              schema:
                example:
                  finished: true
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
      bearerFormat: TOKEN

