package com.example.backend.rest;
// Generated by CodiumAI

import com.example.backend.Repository.UserInfoEntity;
import com.example.backend.ResponseDtos.*;

import com.example.backend.streaming.SongInfo;
import com.example.backend.streaming.SongQueueService;
import com.example.backend.user_management.UserService;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@SpringBootTest
public class SoundQueueRestTest {
    // GET request to /queue/all returns a list of songs in the queue
    @Test
    public void test_getSongQueue() {
        SongQueueService songQueueService = mock(SongQueueService.class);
        UserService userService = mock(UserService.class);
        SoundQueueRest soundQueueRest = new SoundQueueRest(songQueueService, userService);
        ResponseEntity<Object> response = soundQueueRest.getSongQueue();
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertInstanceOf(SongQueueDto.class, response.getBody());
    }

    // GET request to /queue/page/{page-number} with valid page number returns a page of songs with default page size
    @Test
    public void test_getPageWithDefaultSize_ValidPageNumber() {
        SongQueueService songQueueService = mock(SongQueueService.class);
        UserService userService = mock(UserService.class);
        SoundQueueRest soundQueueRest = new SoundQueueRest(songQueueService, userService);
        int pageNumber = 1;
        ResponseEntity<Object> response = soundQueueRest.getPageWithDefaultSize(pageNumber);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
    }

    // GET request to /queue/page/{page-number}/page-size/{page-size} with valid page number and page size returns a page of songs with custom page size
    //@Test
    public void test_getPageWithCustomSize_ValidPageNumberAndPageSize() {
        SongQueueService songQueueService = mock(SongQueueService.class);
        UserService userService = mock(UserService.class);
        SoundQueueRest soundQueueRest = new SoundQueueRest(songQueueService, userService);
        int pageNumber = 1;
        int pageSize = 10;
        ResponseEntity<Object> response = soundQueueRest.getPageWithCustomSize(pageNumber, pageSize);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertInstanceOf(QueuePageDto.class, response.getBody());
    }

    // GET request to /queue/now-playing returns the currently playing song
    //@Test
    public void test_getNowPlaying() {
        SongQueueService songQueueService = mock(SongQueueService.class);
        UserService userService = mock(UserService.class);
        SoundQueueRest soundQueueRest = new SoundQueueRest(songQueueService, userService);
        ResponseEntity<Object> response = soundQueueRest.getNowPlaying();
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertInstanceOf(CurrentlyPlayingDto.class, response.getBody());
    }

    // POST request to /queue/add with valid link adds a song to the queue
    //@Test
    public void test_addSongToQueue_ValidLink() {
        SongQueueService songQueueService = mock(SongQueueService.class);
        UserService userService = mock(UserService.class);
        SoundQueueRest soundQueueRest = new SoundQueueRest(songQueueService, userService);
        String token = "valid_token";
        Map<String, String> requestBody = new HashMap<>();
        requestBody.put("link", "https://www.youtube.com/watch?v=4vUtXdXmnRE");
        ResponseEntity<Object> response = soundQueueRest.addSongToQueue(token, requestBody);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertInstanceOf(SongInfo.class, response.getBody());
    }

    // POST request to /queue/skip skips the currently playing song
    @Test
    public void test_skipSong() {
        SongQueueService songQueueService = mock(SongQueueService.class);
        UserService userService = mock(UserService.class);
        SoundQueueRest soundQueueRest = new SoundQueueRest(songQueueService, userService);
        String token = "valid_token";
        ResponseEntity<Object> response = soundQueueRest.skipSong(token);
        assertEquals(HttpStatus.OK, response.getStatusCode());
    }

    // GET request to /queue/page/{page-number} with invalid page number returns an error message
    //@Test
    public void test_getPageWithDefaultSize_InvalidPageNumber() {
        SongQueueService songQueueService = mock(SongQueueService.class);
        UserService userService = mock(UserService.class);
        SoundQueueRest soundQueueRest = new SoundQueueRest(songQueueService, userService);
        int pageNumber = -1;
        ResponseEntity<Object> response = soundQueueRest.getPageWithDefaultSize(pageNumber);
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertNotNull(response.getBody());
        assertInstanceOf(ErrorDto.class, response.getBody());
    }

    // GET request to /queue/page/{page-number}/page-size/{page-size} with invalid page number returns an error message
    //@Test
    public void test_getPageWithCustomSize_InvalidPageNumber() {
        SongQueueService songQueueService = mock(SongQueueService.class);
        UserService userService = mock(UserService.class);
        SoundQueueRest soundQueueRest = new SoundQueueRest(songQueueService, userService);
        int pageNumber = -1;
        int pageSize = 10;
        ResponseEntity<Object> response = soundQueueRest.getPageWithCustomSize(pageNumber, pageSize);
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertNotNull(response.getBody());
        assertInstanceOf(ErrorDto.class, response.getBody());
    }

    // GET request to /queue/page/{page-number}/page-size/{page-size} with invalid page size returns an error message
    //@Test
    public void test_invalid_page_size_returns_error_message() {
        // Arrange
        SongQueueService songQueueService = mock(SongQueueService.class);
        UserService userService = mock(UserService.class);
        SoundQueueRest soundQueueRest = new SoundQueueRest(songQueueService, userService);
        int pageNumber = 1;
        int pageSize = -1;

        // Act
        ResponseEntity<Object> response = soundQueueRest.getPageWithCustomSize(pageNumber, pageSize);

        // Assert
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertInstanceOf(ErrorDto.class, response.getBody());
        ErrorDto errorDto = (ErrorDto) response.getBody();
        assertEquals("page number does not exist", errorDto.getError());
    }

    // POST request to /queue/replay when no song is playing returns an error message
    @Test
    public void test_post_request_no_song_playing_returns_error_message() {
        // Arrange
        SongQueueService songQueueService = mock(SongQueueService.class);
        UserService userService = mock(UserService.class);
        SoundQueueRest soundQueueRest = new SoundQueueRest(songQueueService, userService);
    
        // Act
        ResponseEntity<Object> response = soundQueueRest.replaySong("token");
    
        // Assert
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        ErrorDto errorDto = (ErrorDto) response.getBody();
        assertNotNull(errorDto);
        assertEquals("No song currently playing!", errorDto.getError());
    }

    // POST request to /queue/add with invalid link returns an error message
    @Test
    public void test_invalid_link_error_message() {
        // Arrange
        SongQueueService songQueueService = mock(SongQueueService.class);
        UserService userService = mock(UserService.class);
        SoundQueueRest soundQueueRest = new SoundQueueRest(songQueueService, userService);
        MockHttpServletRequest request = new MockHttpServletRequest();
        MockHttpServletResponse response = new MockHttpServletResponse();
        Map<String, String> requestBody = new HashMap<>();
        requestBody.put("link", "invalid_link");

        // Act
        ResponseEntity<Object> result = soundQueueRest.addSongToQueue("token", requestBody);

        // Assert
        assertEquals(HttpStatus.BAD_REQUEST, result.getStatusCode());
        assertInstanceOf(ErrorDto.class, result.getBody());
        ErrorDto errorDto = (ErrorDto) result.getBody();
        assertEquals("Song could not be added", errorDto.getError());
    }

    // POST request to /queue/change-order with invalid old position returns an error message
    @Test
    public void test_postRequestWithInvalidOldPosition_returnsErrorMessage() {
        // Arrange
        SongQueueService songQueueService = mock(SongQueueService.class);
        UserService userService = mock(UserService.class);
        SoundQueueRest soundQueueRest = new SoundQueueRest(songQueueService, userService);
        MockHttpServletRequest request = new MockHttpServletRequest();
        RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request));
        Map<String, Integer> positions = new HashMap<>();
        positions.put("oldPos", -1);
        positions.put("newPos", 1);

        // Act
        ResponseEntity<Object> response = soundQueueRest.changeOrder("token", positions);

        // Assert
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertInstanceOf(ErrorDto.class, response.getBody());
        ErrorDto errorDto = (ErrorDto) response.getBody();
        assertEquals("Position of song does not exist", errorDto.getError());
    }

    // POST request to /queue/change-order with invalid new position returns an error message
    @Test
    public void test_invalid_new_position_returns_error_message() {
        // Arrange
        SongQueueService songQueueService = mock(SongQueueService.class);
        UserService userService = mock(UserService.class);
        SoundQueueRest soundQueueRest = new SoundQueueRest(songQueueService, userService);
        Map<String, Integer> positions = new HashMap<>();
        positions.put("oldPos", 0);
        positions.put("newPos", -1);

        // Act
        ResponseEntity<Object> response = soundQueueRest.changeOrder("token", positions);

        // Assert
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertInstanceOf(ErrorDto.class, response.getBody());
        ErrorDto errorDto = (ErrorDto) response.getBody();
        assertEquals("Position of song does not exist", errorDto.getError());
    }

    // GET request to /search/history/{search-term}/max-results/{max-results} with invalid max results returns an error message
    @Test
    public void test_invalid_max_results_error_message() {
        // Arrange
        SongQueueService songQueueService = mock(SongQueueService.class);
        UserService userService = mock(UserService.class);
        SoundQueueRest soundQueueRest = new SoundQueueRest(songQueueService, userService);
        MockHttpServletRequest request = new MockHttpServletRequest();
        MockHttpServletResponse response = new MockHttpServletResponse();
        Map<String, String> pathVariables = new HashMap<>();
        pathVariables.put("search-term", "test");
        pathVariables.put("max-results", "-1");

        // Act
        ResponseEntity<Object> result = soundQueueRest.searchSongHistory(request.getHeader("X-API-KEY"), pathVariables.get("search-term"), Integer.parseInt(pathVariables.get("max-results")));

        // Assert
        assertEquals(HttpStatus.BAD_REQUEST, result.getStatusCode());
        ErrorDto errorDto = (ErrorDto) result.getBody();
        assertEquals("invalid value for 'max-results'", errorDto.getError());
    }

    // POST request to /queue/volume/{volume} with invalid volume returns an error message
    @Test
    public void test_postRequestWithInvalidVolume_returnsErrorMessage() {
        // Arrange
        SongQueueService songQueueService = mock(SongQueueService.class);
        UserService userService = mock(UserService.class);
        SoundQueueRest soundQueueRest = new SoundQueueRest(songQueueService, userService);
        MockHttpServletRequest request = new MockHttpServletRequest();
        MockHttpServletResponse response = new MockHttpServletResponse();
        int volume = -1;
        String token = "test_token";
    
        // Act
        ResponseEntity<Object> result = soundQueueRest.changeVolume(token, volume);
    
        // Assert
        assertEquals(HttpStatus.BAD_REQUEST, result.getStatusCode());
        assertInstanceOf(ErrorDto.class, result.getBody());
        ErrorDto errorDto = (ErrorDto) result.getBody();
        assertEquals("invalid value for 'volume'", errorDto.getError());
    }

    // POST request to /queue/stop stops the queue if it is playing
    @Test
    public void test_stopQueueIfPlaying() {
        // Arrange
        SongQueueService songQueueService = mock(SongQueueService.class);
        UserService userService = mock(UserService.class);
        SoundQueueRest soundQueueRest = new SoundQueueRest(songQueueService, userService);
    
        // Mock the isPlaying method to return true
        when(songQueueService.isPlaying()).thenReturn(true);
    
        // Act
        ResponseEntity<Object> response = soundQueueRest.stopQueue("token");
    
        // Assert
        assertEquals(HttpStatus.ACCEPTED, response.getStatusCode());
    }

    // POST request to /queue/start starts the queue if it is not already playing
    @Test
    public void test_startQueue_startsQueueIfNotPlaying() {
        // Arrange
        SongQueueService songQueueService = mock(SongQueueService.class);
        UserService userService = mock(UserService.class);
        SoundQueueRest soundQueueRest = new SoundQueueRest(songQueueService, userService);

        when(!songQueueService.isPlaying()).thenReturn(false);

        // Act
        ResponseEntity<Object> response = soundQueueRest.startQueue("token");

        // Assert
        assertEquals(HttpStatus.ACCEPTED, response.getStatusCode());
    }

    // GET request to /vote-skip/withdraw withdraws the user's vote to skip the currently playing song
    @Test
    public void test_withdraw_vote_skip() {
        // Arrange
        SongQueueService songQueueService = mock(SongQueueService.class);
        UserService userService = mock(UserService.class);
        SoundQueueRest soundQueueRest = new SoundQueueRest(songQueueService, userService);
        String token = "test_token";
    
        // Act
        ResponseEntity<Object> response = soundQueueRest.withdrawVoteSkip(token);
    
        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
    }

    // GET request to /vote-skip/vote adds a vote to skip the currently playing song
    @Test
    public void test_vote_skip_adds_vote() {
        // Arrange
        SongQueueService songQueueService = mock(SongQueueService.class);
        UserService userService = mock(UserService.class);
        SoundQueueRest soundQueueRest = new SoundQueueRest(songQueueService, userService);
        String token = "test_token";
    
        // Act
        ResponseEntity<Object> response = soundQueueRest.setVoteSkip(token);
    
        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        // Add additional assertions based on the expected behavior
    }

    // GET request to /vote-skip/status returns the vote skip status for the user
    @Test
    public void test_getVoteSkipStatus() {
        // Arrange
        SongQueueService songQueueService = mock(SongQueueService.class);
        UserService userService = mock(UserService.class);
        SoundQueueRest soundQueueRest = new SoundQueueRest(songQueueService, userService);
        String token = "test_token";
        UserInfoEntity user = new UserInfoEntity();
        user.setId(1L);
        user.setToken(token);
        when(userService.getUserByToken(token)).thenReturn(user);
        when(songQueueService.getVoteSkipStatus(user.getId())).thenReturn(new VoteSkipStatusDto(true, 1, 5));

        // Act
        ResponseEntity<Object> response = soundQueueRest.getVoteSkipStatus(token);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
    }
}